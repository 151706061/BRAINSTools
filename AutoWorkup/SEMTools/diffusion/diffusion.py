# -*- coding: utf8 -*- 
"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

from nipype.interfaces.base import CommandLine, CommandLineInputSpec, SEMLikeCommandLine, TraitedSpec, File, Directory, traits, isdefined, InputMultiPath, OutputMultiPath
import os


class DTI-RegInputSpec(CommandLineInputSpec):
    ProgramsPathsVector = InputMultiPath(traits.Str, desc="Vector containing paths where we can find needed programs", sep=",", argstr="--ProgramsPathsVector %s")
    fixedVolume = File(desc="Fixed DTI image", exists=True, argstr="--fixedVolume %s")
    movingVolume = File(desc="Moving DTI image", exists=True, argstr="--movingVolume %s")
    initialAffine = File(desc="Filename of transform used to initialize the registration. If BRAINS used, this CAN NOT be used with initializeTransformMode option.", exists=True, argstr="--initialAffine %s")
    fixedMaskVolume = File(desc="Optional: Fixed binary mask image", exists=True, argstr="--fixedMaskVolume %s")
    movingMaskVolume = File(desc="Optional: Moving binary mask image", exists=True, argstr="--movingMaskVolume %s")
    method = traits.Enum("useScalar-BRAINS", "useScalar-ANTS", desc="Use scalar FA map to drive the registration via: Method 1)BRAINS -BRAINSFit/BRAINSDemonWarp-  or Method 2)ANTS", argstr="--method %s")
    BRAINSRegistrationType = traits.Enum("None", "Rigid", "Affine", "BSpline", "Diffeomorphic", "Demons", "FastSymmetricForces", desc="BRAINS Registration type: None, Rigid, Affine, BSpline, Diffeomorphic, LogDemons, SymmetricLogDemons", argstr="--BRAINSRegistrationType %s")
    ANTSRegistrationType = traits.Enum("None", "Rigid", "Affine", "Elast", "Exp", "GreedyExp", "GreedyDiffeo", "SpatioTempDiffeo", desc="ANTS Registration type: None, Rigid, Affine, GreedyDiffeo, SpatioTempDiffeo", argstr="--ANTSRegistrationType %s")
    outputVolume = traits.Either(traits.Bool, File(), hash_files=False, desc="Output DTI image", argstr="--outputVolume %s")
    ANTSOutbase = traits.Str(desc="Prefix for ANTS linear transformation and deformation field output files (default outbase: moving FA map prefix). Transform file is named \'ANTSOutbase\'Affine.txt and deformationfield is named \'ANTSOutbase\'Warp.nii.gz (default ANTS naming convention)", argstr="--ANTSOutbase %s")
    outputTransform = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Transformation File (Text file)", argstr="--outputTransform %s")
    outputDeformationFieldVolume = traits.Either(traits.Bool, File(), hash_files=False, desc="Output deformation field vector image", argstr="--outputDeformationFieldVolume %s")
    outputFixedFAVolume = traits.Either(traits.Bool, File(), hash_files=False, desc="fixed FA Volume", argstr="--outputFixedFAVolume %s")
    outputMovingFAVolume = traits.Either(traits.Bool, File(), hash_files=False, desc="moving FA Volume", argstr="--outputMovingFAVolume %s")
    outputResampledFAVolume = traits.Either(traits.Bool, File(), hash_files=False, desc="Resampled FA Volume", argstr="--outputResampledFAVolume %s")
    BRAINSinitializeTransformMode = traits.Enum("Off", "useMomentsAlign", "useCenterOfHeadAlign", "useGeometryAlign", desc="Determine how to initialize the transform center. GeometryAlign on assumes that the center of the voxel lattice of the images represent similar structures.  MomentsAlign assumes that the center of mass of the images represent similar structures.  useCenterOfHeadAlign attempts to use the top of head and shape of neck to drive a center of mass estimate.  Off assumes that the physical space of the images are close, and that centering in terms of the image Origins is a good starting point.  This flag is mutually exclusive with the initialTransform flag.", argstr="--BRAINSinitializeTransformMode %s")
    BRAINSinitialDeformationField = File(desc="Initial deformation field vector image file", exists=True, argstr="--BRAINSinitialDeformationField %s")
    BRAINSnumberOfPyramidLevels = traits.Int(desc="Number of image pyramid levels to use in the multi-resolution registration.", argstr="--BRAINSnumberOfPyramidLevels %d")
    BRAINSarrayOfPyramidLevelIterations = traits.Str(desc="The number of iterations for each pyramid level", argstr="--BRAINSarrayOfPyramidLevelIterations %s")
    BRAINSnumberOfHistogramLevels = traits.Int(desc="The number of histogram levels to use", argstr="--BRAINSnumberOfHistogramLevels %d")
    numberOfMatchPoints = traits.Int(desc="The number of match points to use", argstr="--numberOfMatchPoints %d")
    ANTSIterations = traits.Str(desc="ANTS Iterations for diffeomorphism", argstr="--ANTSIterations %s")
    ANTSSimilarityMetric = traits.Enum("CC", "MI", "MSQ", desc="ANTS Similarity Metric type: CC=Cross-Correlation, MI=Mutual Information, MSQ=Mean Square Difference", argstr="--ANTSSimilarityMetric %s")
    ANTSSimilarityParameter = traits.Float(desc="ANTS Similarity Parameter (e.g Region Radius for CC -default 2-, numbers of bins for MI -advised default 32-...)", argstr="--ANTSSimilarityParameter %f")
    ANTSTransformationStep = traits.Str(desc="Diffeomorphic gradient descent step length. Examples: 1)Greedy Diffeomorphism: default=0.25.  2)SpatioTemporal diffeomorphism: advised default=0.25,5,0.01)", argstr="--ANTSTransformationStep %s")
    ANTSGaussianSmoothingOff = traits.Bool(desc="ANTS Gaussian Smoothing Off", argstr="--ANTSGaussianSmoothingOff ")
    ANTSGaussianSigma = traits.Float(desc="ANTS Gaussian Sigma", argstr="--ANTSGaussianSigma %f")


class DTI-RegOutputSpec(TraitedSpec):
    outputVolume = File(desc="Output DTI image", exists=True)
    outputTransform = File(desc="Output Transformation File (Text file)", exists=True)
    outputDeformationFieldVolume = File(desc="Output deformation field vector image", exists=True)
    outputFixedFAVolume = File(desc="fixed FA Volume", exists=True)
    outputMovingFAVolume = File(desc="moving FA Volume", exists=True)
    outputResampledFAVolume = File(desc="Resampled FA Volume", exists=True)


class DTI-Reg(SEMLikeCommandLine):
    """title: DTI-Reg

category: Diffusion.Diffusion Tensor Images

description: DTI-Reg performs pair-wise DTI registration, using FA maps to drive the registration

version: 1.1.2

documentation-url: http://www.nitrc.org/projects/dtireg/

contributor: Clement Vachet (NIRAL, UNC-Chapel Hill)

acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.

"""

    input_spec = DTI-RegInputSpec
    output_spec = DTI-RegOutputSpec
    _cmd = " DTI-Reg "
    _outputs_filenames = {'outputVolume':'outputVolume.nii','outputTransform':'outputTransform.txt','outputDeformationFieldVolume':'outputDeformationFieldVolume.nii','outputMovingFAVolume':'outputMovingFAVolume.nii','outputFixedFAVolume':'outputFixedFAVolume.nii','outputResampledFAVolume':'outputResampledFAVolume.nii'}


class DWIConvertInputSpec(CommandLineInputSpec):
    conversionMode = traits.Enum("DicomToNrrd", "DicomToFSL", "NrrdToFSL", "FSLToNrrd", desc="Determine which conversion to performn", argstr="--conversionMode %s")
    inputVolume = File(desc="Input DWI volume -- not used for DicomToNrrd.", exists=True, argstr="--inputVolume %s")
    outputVolume = traits.Either(traits.Bool, File(), hash_files=False, desc="Output filename (.nhdr or .nrrd)", argstr="--outputVolume %s")
    fMRI = traits.Bool(desc="Output a NRRD file, but no Gradients", argstr="--fMRI ")
    inputDicomDirectory = Directory(desc="Directory holding Dicom series", exists=True, argstr="--inputDicomDirectory %s")
    outputDirectory = traits.Either(traits.Bool, Directory(), hash_files=False, desc="Directory holding the output NRRD format", argstr="--outputDirectory %s")
    gradientVectorFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Text file giving gradient vectors", argstr="--gradientVectorFile %s")
    smallGradientThreshold = traits.Float(desc="If a gradient magnitude is greater than 0 and less than smallGradientThreshold, then DWIConvert will display an error message and quit, unless the useBMatrixGradientDirections option is set.", argstr="--smallGradientThreshold %f")
    writeProtocolGradientsFile = traits.Bool(desc="Write the protocol gradients to a file suffixed by \'.txt\' as they were specified in the procol by multiplying each diffusion gradient direction by the measurement frame.  This file is for debugging purposes only, the format is not fixed, and will likely change as debugging of new dicom formats is necessary.", argstr="--writeProtocolGradientsFile ")
    useIdentityMeaseurementFrame = traits.Bool(desc="Adjust all the gradients so that the measurement frame is an identity matrix.", argstr="--useIdentityMeaseurementFrame ")
    useBMatrixGradientDirections = traits.Bool(desc="Fill the nhdr header with the gradient directions and bvalues computed out of the BMatrix. Only changes behavior for Siemens data.  In some cases the standard public gradients are not properly computed.  The gradients can emperically computed from the private BMatrix fields.  In some cases the private BMatrix is consistent with the public grandients, but not in all cases, when it exists BMatrix is usually most robust.", argstr="--useBMatrixGradientDirections ")
    inputBValues = File(desc="B Values text file", exists=True, argstr="--inputBValues %s")
    inputBVectors = File(desc="B Vector text file", exists=True, argstr="--inputBVectors %s")
    outputBValues = traits.Either(traits.Bool, File(), hash_files=False, desc="B Values text file", argstr="--outputBValues %s")
    outputBVectors = traits.Either(traits.Bool, File(), hash_files=False, desc="B Vector text file", argstr="--outputBVectors %s")


class DWIConvertOutputSpec(TraitedSpec):
    outputVolume = File(desc="Output filename (.nhdr or .nrrd)", exists=True)
    outputDirectory = Directory(desc="Directory holding the output NRRD format", exists=True)
    gradientVectorFile = File(desc="Text file giving gradient vectors", exists=True)
    outputBValues = File(desc="B Values text file", exists=True)
    outputBVectors = File(desc="B Vector text file", exists=True)


class DWIConvert(SEMLikeCommandLine):
    """title: DWIConverter

category: Diffusion.Diffusion Data Conversion

description: Converts diffusion weighted MR images in dicom series into Nrrd format for analysis in Slicer. This program has been tested on only a limited subset of DTI dicom formats available from Siemens, GE, and Phillips scanners. Work in progress to support dicom multi-frame data. The program parses dicom header to extract necessary information about measurement frame, diffusion weighting directions, b-values, etc, and write out a nrrd image. For non-diffusion weighted dicom images, it loads in an entire dicom series and writes out a single dicom volume in a .nhdr/.raw pair.

version: Version 1.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Documentation/4.1/Modules/DWIConverter

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Vince Magnotta (UIowa), Hans Johnson (UIowa), Joy Matsui (UIowa), Kent Williams (UIowa), Mark Scully (Uiowa), Xiaodong Tao (GE)

acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.  Additional support for DTI data produced on Philips scanners was contributed by Vincent Magnotta and Hans Johnson at the University of Iowa.

"""

    input_spec = DWIConvertInputSpec
    output_spec = DWIConvertOutputSpec
    _cmd = " DWIConvert "
    _outputs_filenames = {'outputVolume':'outputVolume.nii','outputBVectors':'outputBVectors','outputBValues':'outputBValues','gradientVectorFile':'gradientVectorFile','outputDirectory':'outputDirectory'}
