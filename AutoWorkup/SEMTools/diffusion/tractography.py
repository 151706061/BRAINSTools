# -*- coding: utf8 -*- 
"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

from nipype.interfaces.base import CommandLine, CommandLineInputSpec, SEMLikeCommandLine, TraitedSpec, File, Directory, traits, isdefined, InputMultiPath, OutputMultiPath
import os


class FiberViewerLightInputSpec(CommandLineInputSpec):
    input = File(desc="VTK Input File", exists=True, argstr="--input %s")
    output = traits.Str(desc="Output Folder", argstr="--output %s")
    nogui = traits.Bool(desc="If this option is used, you will use the command line, DEFAULT=false", argstr="--nogui ")
    use_danielsson_transform = traits.Bool(desc="If this option is used, computation will use Danielsson Transformation to calculate distances", argstr="--use_danielsson_transform ")
    process_list = InputMultiPath(traits.Str, desc="List of comma separated methods that will be computed and which distance tables will be saved (Gravity,Mean,Hausdorff,NormCut)", sep=",", argstr="--process_list %s")
    x_voxels = traits.Int(desc="Number of voxels on the x axis for the Danielsson Transform. Nb of voxels for others axis will be calculate to keep the original ratio. By default it will use a spacing of 1", argstr="--x_voxels %d")


class FiberViewerLightOutputSpec(TraitedSpec):
    pass


class FiberViewerLight(SEMLikeCommandLine):
    """title: FiberViewer Light

category: Diffusion.Tractography

description: 
		Light Version of FiberViewer. Used for Fiber Clustering thanks to methods such as Length, Gravity, Hausdorff, or Mean Distribution and Normalized Cut.
	

contributor: Jean-Baptiste Berger, Clement Vachet, Martin Styner

"""

    input_spec = FiberViewerLightInputSpec
    output_spec = FiberViewerLightOutputSpec
    _cmd = " FiberViewerLight "
    _outputs_filenames = {}
